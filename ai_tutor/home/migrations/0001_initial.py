# Generated by Django 5.2.7 on 2025-10-24 17:32

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sessione Chat',
                'verbose_name_plural': 'Sessioni Chat',
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('user', 'Utente'), ('assistant', 'Assistente'), ('system', 'Sistema')], max_length=20)),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('tokens_used', models.IntegerField(blank=True, help_text='Token utilizzati per questo messaggio', null=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='home.chatsession')),
            ],
            options={
                'verbose_name': 'Messaggio Chat',
                'verbose_name_plural': 'Messaggi Chat',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='LLMConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome della configurazione', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Descrizione della configurazione')),
                ('provider', models.CharField(choices=[('openai', 'OpenAI'), ('anthropic', 'Anthropic'), ('google', 'Google'), ('custom', 'Custom')], default='openai', help_text='Provider del servizio LLM', max_length=100)),
                ('model_name', models.CharField(help_text='Nome del modello (es: gpt-4, claude-3-opus, gemini-pro)', max_length=200)),
                ('api_key', models.CharField(help_text='API Key per il provider', max_length=500)),
                ('base_url', models.URLField(blank=True, help_text="URL base personalizzato per l'API (opzionale)", null=True)),
                ('system_prompt', models.TextField(blank=True, help_text="Prompt di sistema per definire il comportamento dell'AI")),
                ('additional_context', models.TextField(blank=True, help_text='Informazioni aggiuntive da includere nel contesto (dati, regole, conoscenze)')),
                ('temperature', models.FloatField(default=0.7, help_text='Controlla la creatività (0.0 = deterministico, 2.0 = molto creativo)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(2.0)])),
                ('max_tokens', models.IntegerField(default=512, help_text='Numero massimo di token nella risposta', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(128000)])),
                ('top_p', models.FloatField(default=1.0, help_text='Controlla la diversità delle risposte (nucleus sampling)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('frequency_penalty', models.FloatField(default=0.0, help_text='Penalità per la ripetizione (OpenAI)', validators=[django.core.validators.MinValueValidator(-2.0), django.core.validators.MaxValueValidator(2.0)])),
                ('presence_penalty', models.FloatField(default=0.0, help_text='Penalità per introdurre nuovi argomenti (OpenAI)', validators=[django.core.validators.MinValueValidator(-2.0), django.core.validators.MaxValueValidator(2.0)])),
                ('model_parameters', models.JSONField(blank=True, default=dict, help_text='Parametri aggiuntivi specifici del modello (formato JSON). Es: top_k, stop_sequences, etc.')),
                ('stream', models.BooleanField(default=True, help_text='Abilita streaming delle risposte')),
                ('timeout', models.IntegerField(default=30, help_text='Timeout in secondi')),
                ('retry_attempts', models.IntegerField(default=3, help_text='Numero di tentativi in caso di errore')),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False, help_text='Configurazione predefinita')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Configurazione LLM',
                'verbose_name_plural': 'Configurazioni LLM',
                'ordering': ['-is_default', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='chatsession',
            name='configuration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.llmconfiguration'),
        ),
    ]
